"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v5.28.0
// source: user-service/user.proto
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserServiceClient = exports.UserServiceService = exports.CreateUserResponse = exports.CreateUserRequest = exports.ServiceResponse = exports.Status = exports.protobufPackage = void 0;
/* eslint-disable */
const grpc_js_1 = require("@grpc/grpc-js");
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const struct_1 = require("../google/protobuf/struct");
exports.protobufPackage = "user";
function createBaseStatus() {
    return { success: false, errorName: "", errorCode: 0, errorMsg: "" };
}
exports.Status = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.success !== false) {
            writer.uint32(8).bool(message.success);
        }
        if (message.errorName !== "") {
            writer.uint32(18).string(message.errorName);
        }
        if (message.errorCode !== 0) {
            writer.uint32(24).int32(message.errorCode);
        }
        if (message.errorMsg !== "") {
            writer.uint32(34).string(message.errorMsg);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseStatus();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.success = reader.bool();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.errorName = reader.string();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.errorCode = reader.int32();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.errorMsg = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            success: isSet(object.success) ? globalThis.Boolean(object.success) : false,
            errorName: isSet(object.errorName) ? globalThis.String(object.errorName) : "",
            errorCode: isSet(object.errorCode) ? globalThis.Number(object.errorCode) : 0,
            errorMsg: isSet(object.errorMsg) ? globalThis.String(object.errorMsg) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.success !== false) {
            obj.success = message.success;
        }
        if (message.errorName !== "") {
            obj.errorName = message.errorName;
        }
        if (message.errorCode !== 0) {
            obj.errorCode = Math.round(message.errorCode);
        }
        if (message.errorMsg !== "") {
            obj.errorMsg = message.errorMsg;
        }
        return obj;
    },
    create(base) {
        return exports.Status.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseStatus();
        message.success = (_a = object.success) !== null && _a !== void 0 ? _a : false;
        message.errorName = (_b = object.errorName) !== null && _b !== void 0 ? _b : "";
        message.errorCode = (_c = object.errorCode) !== null && _c !== void 0 ? _c : 0;
        message.errorMsg = (_d = object.errorMsg) !== null && _d !== void 0 ? _d : "";
        return message;
    },
};
function createBaseServiceResponse() {
    return { status: undefined, data: undefined };
}
exports.ServiceResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.status !== undefined) {
            exports.Status.encode(message.status, writer.uint32(10).fork()).ldelim();
        }
        if (message.data !== undefined) {
            struct_1.Struct.encode(struct_1.Struct.wrap(message.data), writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseServiceResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.status = exports.Status.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.data = struct_1.Struct.unwrap(struct_1.Struct.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            status: isSet(object.status) ? exports.Status.fromJSON(object.status) : undefined,
            data: isObject(object.data) ? object.data : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.status !== undefined) {
            obj.status = exports.Status.toJSON(message.status);
        }
        if (message.data !== undefined) {
            obj.data = message.data;
        }
        return obj;
    },
    create(base) {
        return exports.ServiceResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseServiceResponse();
        message.status = (object.status !== undefined && object.status !== null)
            ? exports.Status.fromPartial(object.status)
            : undefined;
        message.data = (_a = object.data) !== null && _a !== void 0 ? _a : undefined;
        return message;
    },
};
function createBaseCreateUserRequest() {
    return { phone: "", userName: "" };
}
exports.CreateUserRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.phone !== "") {
            writer.uint32(10).string(message.phone);
        }
        if (message.userName !== "") {
            writer.uint32(18).string(message.userName);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCreateUserRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.phone = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.userName = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            phone: isSet(object.phone) ? globalThis.String(object.phone) : "",
            userName: isSet(object.userName) ? globalThis.String(object.userName) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.phone !== "") {
            obj.phone = message.phone;
        }
        if (message.userName !== "") {
            obj.userName = message.userName;
        }
        return obj;
    },
    create(base) {
        return exports.CreateUserRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseCreateUserRequest();
        message.phone = (_a = object.phone) !== null && _a !== void 0 ? _a : "";
        message.userName = (_b = object.userName) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseCreateUserResponse() {
    return { data: undefined };
}
exports.CreateUserResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.data !== undefined) {
            exports.ServiceResponse.encode(message.data, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCreateUserResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.data = exports.ServiceResponse.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { data: isSet(object.data) ? exports.ServiceResponse.fromJSON(object.data) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.data !== undefined) {
            obj.data = exports.ServiceResponse.toJSON(message.data);
        }
        return obj;
    },
    create(base) {
        return exports.CreateUserResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseCreateUserResponse();
        message.data = (object.data !== undefined && object.data !== null)
            ? exports.ServiceResponse.fromPartial(object.data)
            : undefined;
        return message;
    },
};
exports.UserServiceService = {
    registerCustomer: {
        path: "/user.UserService/RegisterCustomer",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(exports.CreateUserRequest.encode(value).finish()),
        requestDeserialize: (value) => exports.CreateUserRequest.decode(value),
        responseSerialize: (value) => Buffer.from(exports.ServiceResponse.encode(value).finish()),
        responseDeserialize: (value) => exports.ServiceResponse.decode(value),
    },
};
exports.UserServiceClient = (0, grpc_js_1.makeGenericClientConstructor)(exports.UserServiceService, "user.UserService");
function isObject(value) {
    return typeof value === "object" && value !== null;
}
function isSet(value) {
    return value !== null && value !== undefined;
}
